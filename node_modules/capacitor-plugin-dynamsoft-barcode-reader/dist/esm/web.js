import { WebPlugin } from '@capacitor/core';
import { EnumResolution } from './definitions';
import { BarcodeReader, BarcodeScanner } from "dynamsoft-javascript-barcode";
import { CameraEnhancer } from 'dynamsoft-camera-enhancer';
BarcodeReader.engineResourcePath = "https://cdn.jsdelivr.net/npm/dynamsoft-javascript-barcode@9.2.13/dist/";
CameraEnhancer.defaultUIElementURL = "https://cdn.jsdelivr.net/npm/dynamsoft-camera-enhancer@3.0.1/dist/dce.ui.html";
export class DBRWeb extends WebPlugin {
    constructor() {
        super(...arguments);
        this.reader = null;
        this.enhancer = null;
        this.decoding = false;
    }
    async toggleTorch(options) {
        var _a, _b;
        if (this.enhancer) {
            try {
                if (options["on"]) {
                    (_a = this.enhancer) === null || _a === void 0 ? void 0 : _a.turnOnTorch();
                }
                else {
                    (_b = this.enhancer) === null || _b === void 0 ? void 0 : _b.turnOffTorch();
                }
            }
            catch (e) {
                throw new Error("Torch unsupported");
            }
        }
    }
    async stopScan() {
        var _a;
        try {
            this.stopDecoding();
            (_a = this.enhancer) === null || _a === void 0 ? void 0 : _a.close(true);
        }
        catch (e) {
            throw e;
        }
    }
    async pauseScan() {
        var _a;
        try {
            this.stopDecoding();
            (_a = this.enhancer) === null || _a === void 0 ? void 0 : _a.pause();
        }
        catch (e) {
            throw e;
        }
    }
    async resumeScan() {
        var _a;
        try {
            await ((_a = this.enhancer) === null || _a === void 0 ? void 0 : _a.resume());
            this.startDecoding();
        }
        catch (e) {
            throw e;
        }
    }
    async destroy() {
        var _a, _b;
        this.stopDecoding();
        (_a = this.enhancer) === null || _a === void 0 ? void 0 : _a.dispose(true);
        (_b = this.reader) === null || _b === void 0 ? void 0 : _b.destroyContext();
        this.enhancer = null;
        this.reader = null;
    }
    async initialize(options) {
        if (this.reader === null) {
            if (options) {
                if (options.license) {
                    BarcodeReader.license = options.license;
                }
            }
            this.enhancer = await CameraEnhancer.createInstance();
            this.reader = await BarcodeScanner.createInstance();
            await this.reader.updateRuntimeSettings('balance');
            this.enhancer.on("played", (playCallBackInfo) => {
                this.notifyListeners("onPlayed", { resolution: playCallBackInfo.width + "x" + playCallBackInfo.height });
            });
            await this.enhancer.setUIElement(CameraEnhancer.defaultUIElementURL);
            this.enhancer.getUIElement().getElementsByClassName("dce-btn-close")[0].remove();
            this.enhancer.getUIElement().getElementsByClassName("dce-sel-camera")[0].remove();
            this.enhancer.getUIElement().getElementsByClassName("dce-sel-resolution")[0].remove();
            this.enhancer.getUIElement().getElementsByClassName("dce-msg-poweredby")[0].remove();
        }
        else {
            console.log("Scanner already initialized.");
        }
        return { success: true };
    }
    async captureAndDecode() {
        if (this.enhancer == null || this.reader == null) {
            return;
        }
        if (this.enhancer.isOpen() == false) {
            return;
        }
        if (this.decoding == true) {
            return;
        }
        let frame = this.enhancer.getFrame();
        if (frame) {
            this.decoding = true;
            let results = await this.reader.decode(frame);
            this.decoding = false;
            let textResults = [];
            for (let index = 0; index < results.length; index++) {
                let result = results[index];
                let tr;
                let sx = 0;
                let sy = 0;
                if (frame.isCropped == true) {
                    sx = frame.sx;
                    sy = frame.sy;
                }
                tr = {
                    barcodeText: result.barcodeText,
                    barcodeFormat: result.barcodeFormatString,
                    barcodeBytesBase64: this.arrayBufferToBase64(result.barcodeBytes),
                    x1: result.localizationResult.x1 + sx,
                    y1: result.localizationResult.y1 + sy,
                    x2: result.localizationResult.x2 + sx,
                    y2: result.localizationResult.y2 + sy,
                    x3: result.localizationResult.x3 + sx,
                    y3: result.localizationResult.y3 + sy,
                    x4: result.localizationResult.x4 + sx,
                    y4: result.localizationResult.y4 + sy,
                };
                textResults.push(tr);
            }
            var ret = { "results": textResults };
            this.notifyListeners("onFrameRead", ret);
        }
    }
    async setScanRegion(region) {
        var _a;
        (_a = this.enhancer) === null || _a === void 0 ? void 0 : _a.setScanRegion({
            regionLeft: region.left,
            regionTop: region.top,
            regionRight: region.right,
            regionBottom: region.bottom,
            regionMeasuredByPercentage: region.measuredByPercentage
        });
        return { success: true };
    }
    async initRuntimeSettingsWithString(options) {
        var _a;
        if (options.template) {
            await ((_a = this.reader) === null || _a === void 0 ? void 0 : _a.initRuntimeSettingsWithString(options.template));
            console.log("Using template");
        }
    }
    async startScan() {
        var _a;
        await ((_a = this.enhancer) === null || _a === void 0 ? void 0 : _a.open(true));
        this.startDecoding();
    }
    startDecoding() {
        if (this.interval) {
            clearInterval(this.interval);
        }
        this.decoding = false;
        this.interval = setInterval(this.captureAndDecode.bind(this), 100);
    }
    stopDecoding() {
        if (this.interval) {
            clearInterval(this.interval);
        }
        this.decoding = false;
    }
    arrayBufferToBase64(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
    async getAllCameras() {
        if (this.enhancer) {
            let cameras = await this.enhancer.getAllCameras();
            let labels = [];
            cameras.forEach(camera => {
                labels.push(camera.label);
            });
            return { cameras: labels };
        }
        return { message: "not initialized" };
    }
    async selectCamera(options) {
        var _a;
        if (this.enhancer) {
            let cameras = await this.enhancer.getAllCameras();
            for (let index = 0; index < cameras.length; index++) {
                const camera = cameras[index];
                if (camera.label === options.cameraID) {
                    await ((_a = this.enhancer) === null || _a === void 0 ? void 0 : _a.selectCamera(camera));
                    return { success: true };
                }
            }
            return { message: "not found" };
        }
        else {
            return { message: "not initialized" };
        }
    }
    async getSelectedCamera() {
        if (this.enhancer) {
            let cameraInfo = this.enhancer.getSelectedCamera();
            return { "selectedCamera": cameraInfo.label };
        }
        else {
            return { message: "not initialized" };
        }
    }
    async getResolution() {
        if (this.enhancer) {
            let rsl = this.enhancer.getResolution();
            let res = rsl[0] + "x" + rsl[1];
            return { resolution: res };
        }
        else {
            return { message: "not initialized" };
        }
    }
    async setResolution(options) {
        if (this.enhancer) {
            let res = options.resolution;
            let width = 1280;
            let height = 720;
            if (res == EnumResolution.RESOLUTION_480P) {
                width = 640;
                height = 480;
            }
            else if (res == EnumResolution.RESOLUTION_720P) {
                width = 1280;
                height = 720;
            }
            else if (res == EnumResolution.RESOLUTION_1080P) {
                width = 1920;
                height = 1080;
            }
            else if (res == EnumResolution.RESOLUTION_2K) {
                width = 2560;
                height = 1440;
            }
            else if (res == EnumResolution.RESOLUTION_4K) {
                width = 3840;
                height = 2160;
            }
            await this.enhancer.setResolution(width, height);
            return { success: true };
        }
        else {
            return { message: "not initialized" };
        }
    }
    async setZoom(options) {
        if (this.enhancer) {
            await this.enhancer.setZoom(options.factor);
            return { success: true };
        }
        else {
            return { message: "not initialized" };
        }
    }
    setFocus(_options) {
        throw new Error('Method not implemented.');
    }
    async setEngineResourcePath(path) {
        BarcodeReader.engineResourcePath = path;
    }
    async setDefaultUIElementURL(url) {
        CameraEnhancer.defaultUIElementURL = url;
    }
}
//# sourceMappingURL=web.js.map