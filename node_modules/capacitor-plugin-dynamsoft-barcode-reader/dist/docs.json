{
  "api": {
    "name": "DBRPlugin",
    "slug": "dbrplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "initialize",
        "signature": "(options?: Options | undefined) => Promise<{ success?: boolean; message?: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "Options | undefined"
          }
        ],
        "returns": "Promise<{ success?: boolean | undefined; message?: string | undefined; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "Options"
        ],
        "slug": "initialize"
      },
      {
        "name": "initRuntimeSettingsWithString",
        "signature": "(options: { template: string; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ template: string; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "initruntimesettingswithstring"
      },
      {
        "name": "toggleTorch",
        "signature": "(options: { on: boolean; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ on: boolean; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "toggletorch"
      },
      {
        "name": "startScan",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "startscan"
      },
      {
        "name": "stopScan",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "stopscan"
      },
      {
        "name": "resumeScan",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "resumescan"
      },
      {
        "name": "pauseScan",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "pausescan"
      },
      {
        "name": "stopScan",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "stopscan"
      },
      {
        "name": "getAllCameras",
        "signature": "() => Promise<{ cameras?: string[]; message?: string; }>",
        "parameters": [],
        "returns": "Promise<{ cameras?: string[] | undefined; message?: string | undefined; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getallcameras"
      },
      {
        "name": "getSelectedCamera",
        "signature": "() => Promise<{ selectedCamera?: string; message?: string; }>",
        "parameters": [],
        "returns": "Promise<{ selectedCamera?: string | undefined; message?: string | undefined; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getselectedcamera"
      },
      {
        "name": "selectCamera",
        "signature": "(options: { cameraID: string; }) => Promise<{ success?: boolean; message?: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ cameraID: string; }"
          }
        ],
        "returns": "Promise<{ success?: boolean | undefined; message?: string | undefined; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "selectcamera"
      },
      {
        "name": "getResolution",
        "signature": "() => Promise<{ resolution?: string; message?: string; }>",
        "parameters": [],
        "returns": "Promise<{ resolution?: string | undefined; message?: string | undefined; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "getresolution"
      },
      {
        "name": "setResolution",
        "signature": "(options: { resolution: number; }) => Promise<{ success?: boolean; message?: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ resolution: number; }"
          }
        ],
        "returns": "Promise<{ success?: boolean | undefined; message?: string | undefined; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setresolution"
      },
      {
        "name": "setScanRegion",
        "signature": "(options: ScanRegion) => Promise<{ success?: boolean; message?: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "ScanRegion"
          }
        ],
        "returns": "Promise<{ success?: boolean | undefined; message?: string | undefined; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "ScanRegion"
        ],
        "slug": "setscanregion"
      },
      {
        "name": "setZoom",
        "signature": "(options: { factor: number; }) => Promise<{ success?: boolean; message?: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ factor: number; }"
          }
        ],
        "returns": "Promise<{ success?: boolean | undefined; message?: string | undefined; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setzoom"
      },
      {
        "name": "setFocus",
        "signature": "(options: { x: number; y: number; }) => Promise<{ success?: boolean; message?: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ x: number; y: number; }"
          }
        ],
        "returns": "Promise<{ success?: boolean | undefined; message?: string | undefined; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setfocus"
      },
      {
        "name": "destroy",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "destroy"
      },
      {
        "name": "setEngineResourcePath",
        "signature": "(path: string) => Promise<void>",
        "parameters": [
          {
            "name": "path",
            "docs": "",
            "type": "string"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setengineresourcepath"
      },
      {
        "name": "setDefaultUIElementURL",
        "signature": "(url: string) => Promise<void>",
        "parameters": [
          {
            "name": "url",
            "docs": "",
            "type": "string"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "setdefaultuielementurl"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'onFrameRead', listenerFunc: onFrameReadListener) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "\"onFrameRead\""
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(result: ScanResult) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "onFrameReadListener"
        ],
        "slug": "addlistener"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'onPlayed', listenerFunc: onPlayedListener) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "\"onPlayed\""
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(result: { resolution: string; }) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle",
          "onPlayedListener"
        ],
        "slug": "addlistener"
      },
      {
        "name": "removeAllListeners",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "removealllisteners"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "Options",
      "slug": "options",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "license",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "dceLicense",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "ScanRegion",
      "slug": "scanregion",
      "docs": "measuredByPercentage: 0 in pixel, 1 in percent",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "left",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "top",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "right",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "bottom",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "measuredByPercentage",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        }
      ]
    },
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ]
    }
  ],
  "enums": []
}