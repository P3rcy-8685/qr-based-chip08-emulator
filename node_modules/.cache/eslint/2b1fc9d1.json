[{"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/main.ts":"1","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/App.vue":"2","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/router/index.ts":"3","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/views/HomePage.vue":"4","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/views/ScannerPage.vue":"5","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/states.ts":"6","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/components/QRCodeScanner.vue":"7","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/main.ts":"8","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/App.vue":"9","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/router/index.ts":"10","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/views/HomePage.vue":"11","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/views/ScannerPage.vue":"12","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/states.ts":"13","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/components/QRCodeScanner.vue":"14"},{"size":865,"mtime":1664632667416,"results":"15","hashOfConfig":"16"},{"size":321,"mtime":1664576364709,"results":"17","hashOfConfig":"16"},{"size":563,"mtime":1664576364709,"results":"18","hashOfConfig":"16"},{"size":2126,"mtime":1664632678189,"results":"19","hashOfConfig":"16"},{"size":4839,"mtime":1664632645188,"results":"20","hashOfConfig":"16"},{"size":234,"mtime":1664576364709,"results":"21","hashOfConfig":"16"},{"size":4177,"mtime":1664576364709,"results":"22","hashOfConfig":"16"},{"size":865,"mtime":1664632667416,"results":"23","hashOfConfig":"24"},{"size":321,"mtime":1664576364709,"results":"25","hashOfConfig":"24"},{"size":563,"mtime":1664576364709,"results":"26","hashOfConfig":"24"},{"size":2126,"mtime":1664632678189,"results":"27","hashOfConfig":"24"},{"size":4839,"mtime":1664632645188,"results":"28","hashOfConfig":"24"},{"size":234,"mtime":1664576364709,"results":"29","hashOfConfig":"24"},{"size":4177,"mtime":1664576364709,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16ihjxx",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vledko",{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/main.ts",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/App.vue",[],[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/router/index.ts",[],[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/views/HomePage.vue",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/views/ScannerPage.vue",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/states.ts",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/components/QRCodeScanner.vue",["76"],[],"<template>\r\n  <div v-if=\"!initialized\">Initializing...</div>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport { onBeforeUnmount, onMounted, ref, watch } from 'vue';\r\nimport { DBR, Options, ScanResult } from \"capacitor-plugin-dynamsoft-barcode-reader\";\r\nimport { PluginListenerHandle } from \"@capacitor/core\";\r\n\r\nconst props = defineProps(['license','dceLicense','torchOn','runtimeSettings']);\r\nconst emit = defineEmits(['onScanned','onPlayed']);\r\nconst initialized = ref(false);\r\nlet currentHeight = 0;\r\nlet currentWidth = 0;\r\nlet frameReadListener:PluginListenerHandle|undefined;\r\nlet onPlayedListener:PluginListenerHandle|undefined;\r\n\r\nconst handleRotation = (result:any, orientation: string, rotation:number) => {\r\n   let width,height;\r\n   if (orientation == \"portrait\") {\r\n     width = currentHeight;\r\n     height = currentWidth;\r\n   }else{\r\n     width = currentWidth;\r\n     height = currentHeight;\r\n   }\r\n   for (let i = 1; i < 5; i++) {\r\n     let x = result[\"x\"+i];\r\n     let y = result[\"y\"+i];\r\n     let rotatedX;\r\n     let rotatedY;\r\n            \r\n     switch (rotation) {\r\n       case 0:\r\n         rotatedX = x;\r\n         rotatedY = y;\r\n         break;\r\n       case 90:\r\n         rotatedX = width - y;\r\n         rotatedY = x;\r\n         break;\r\n       case 180:\r\n         rotatedX = width - x;\r\n         rotatedY = height - y;\r\n         break;\r\n       case 270:\r\n         rotatedX = height - y;\r\n         rotatedY = width - x;\r\n         break;\r\n       default:\r\n         rotatedX = x;\r\n         rotatedY = y;\r\n     }\r\n     result[\"x\"+i] = rotatedX;\r\n     result[\"y\"+i] = rotatedY;\r\n   }\r\n }\r\n\r\n\r\nonMounted(async () => {\r\n  console.log(props);\r\n  let options:Options = {};\r\n  if (props.license) {\r\n    options.license = props.license;\r\n  }\r\n  if (props.dceLicense) {\r\n    options.dceLicense = props.dceLicense;\r\n  }\r\n  let result = await DBR.initialize(options); // To use your license: DBR.initialize({license: <your license>})\r\n  console.log(\"QRCodeScanner mounted\");\r\n  if (result.success === true) {\r\n    initialized.value = true;\r\n    if (frameReadListener) {\r\n      frameReadListener.remove();\r\n    }\r\n    if (onPlayedListener) {\r\n      onPlayedListener.remove();\r\n    }\r\n    frameReadListener = await DBR.addListener('onFrameRead', (scanResult:ScanResult) => {\r\n      for (let index = 0; index < scanResult.results.length; index++) {\r\n        const result = scanResult.results[index];\r\n        if (scanResult.deviceOrientation && scanResult.frameOrientation) {\r\n          handleRotation(result,scanResult.deviceOrientation,scanResult.frameOrientation);\r\n        }\r\n      }\r\n      emit(\"onScanned\",scanResult);\r\n    });\r\n\r\n    onPlayedListener = await DBR.addListener(\"onPlayed\", (result:{resolution:string}) => {\r\n      currentWidth = parseInt(result.resolution.split(\"x\")[0]);\r\n      currentHeight = parseInt(result.resolution.split(\"x\")[1]);\r\n      emit(\"onPlayed\",result.resolution);\r\n    });\r\n\r\n    if (props.runtimeSettings) {\r\n      console.log(\"update runtime settings\");\r\n      console.log(props.runtimeSettings);\r\n      await DBR.initRuntimeSettingsWithString({template:props.runtimeSettings});\r\n    }\r\n\r\n    let camerasResult = await DBR.getAllCameras();\r\n    if (camerasResult.cameras) {\r\n      for (let index = 0; index < camerasResult.cameras.length; index++) {\r\n        const cameraID = camerasResult.cameras[index];\r\n        if (cameraID.toLowerCase().indexOf(\"founder\") != -1 ){\r\n          console.log(cameraID)\r\n          console.log(\"selct founder camera\"); //the USB camera's name of the developer\r\n          let selectionResult = await DBR.selectCamera({cameraID:cameraID});\r\n          console.log(selectionResult);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    await DBR.startScan();\r\n   \r\n  }\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  if (frameReadListener) {\r\n    frameReadListener.remove();\r\n  }\r\n  if (onPlayedListener) {\r\n    onPlayedListener.remove();\r\n  }\r\n  DBR.stopScan();\r\n  console.log(\"QRCodeScanner unmount\");\r\n});\r\n\r\n\r\n\r\nwatch(() => props.torchOn, (newVal, oldVal) => {\r\n  if (newVal === true) {\r\n    DBR.toggleTorch({on:true});\r\n  }else{\r\n    DBR.toggleTorch({on:false});\r\n  }\r\n});\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/main.ts",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/App.vue",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/router/index.ts",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/views/HomePage.vue",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/views/ScannerPage.vue",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/states.ts",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner1/src/components/QRCodeScanner.vue",["77"],[],{"ruleId":"78","severity":1,"message":"79","line":133,"column":37,"nodeType":"80","messageId":"81","endLine":133,"endColumn":43},{"ruleId":"78","severity":1,"message":"79","line":133,"column":37,"nodeType":"80","messageId":"81","endLine":133,"endColumn":43},"@typescript-eslint/no-unused-vars","'oldVal' is defined but never used.","Identifier","unusedVar"]