[{"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/main.ts":"1","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/App.vue":"2","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/router/index.ts":"3","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/views/ScannerPage.vue":"4","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/views/HomePage.vue":"5","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/components/QRCodeScanner.vue":"6","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/states.ts":"7"},{"size":865,"mtime":1664576364709,"results":"8","hashOfConfig":"9"},{"size":321,"mtime":1664576364709,"results":"10","hashOfConfig":"9"},{"size":563,"mtime":1664576364709,"results":"11","hashOfConfig":"9"},{"size":4839,"mtime":1664576364709,"results":"12","hashOfConfig":"9"},{"size":2126,"mtime":1664586480420,"results":"13","hashOfConfig":"9"},{"size":4177,"mtime":1664576364709,"results":"14","hashOfConfig":"9"},{"size":234,"mtime":1664576364709,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wi3m81",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/main.ts",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/App.vue",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/router/index.ts",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/views/ScannerPage.vue",["39","40","41","42","43","44","45"],[],"<template>\n\n<ion-page>\n    <QRCodeScanner \n      license=\"DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ==\"\n      :torchOn=\"torchOn\"\n      :runtimeSettings=\"runtimeSettings\"\n      @onScanned=\"onScanned\"\n      @onPlayed=\"onPlayed\"\n    ></QRCodeScanner>\n    <ion-fab vertical=\"bottom\" horizontal=\"start\" slot=\"fixed\">\n      <ion-fab-button>\n        <ion-icon name=\"ellipsis-horizontal-outline\"></ion-icon>\n      </ion-fab-button>\n      <ion-fab-list side=\"top\">\n        <ion-fab-button @click=\"toggleFlash\">\n          <ion-icon name=\"flashlight-outline\"></ion-icon>\n        </ion-fab-button>\n        <ion-fab-button @click=\"close\">\n          <ion-icon name=\"close-outline\"></ion-icon>\n        </ion-fab-button>\n      </ion-fab-list>\n    </ion-fab>\n    <svg\n      :viewBox=\"viewBox\"\n      class=\"overlay\"\n      v-if=\"sharedStates.continuousScan\"\n    >\n      <polygon v-bind:key=\"'polygon'+index\" v-for=\"(barcodeResult,index) in barcodeResults\"\n        :points=\"getPointsData(barcodeResult)\"\n        class=\"barcode-polygon\"\n      />\n      <text v-bind:key=\"'text'+index\" v-for=\"(barcodeResult,index) in barcodeResults\"\n        :x=\"barcodeResult.x1\"\n        :y=\"barcodeResult.y1\"\n        fill=\"red\"\n        font-size=\"25\"\n      >{{barcodeResult.barcodeText}}</text>\n    </svg>\n\n</ion-page>\n  \n</template>\n\n<script lang=\"ts\">\nimport { IonPage, IonIcon, IonFab,IonFabButton,IonFabList, useIonRouter } from '@ionic/vue';\nimport { defineComponent, onMounted, ref } from 'vue';\nimport { states } from '../states'\nimport QRCodeScanner from '../components/QRCodeScanner.vue'\nimport { ScanResult, TextResult } from \"capacitor-plugin-dynamsoft-barcode-reader\";\nimport { addIcons } from 'ionicons';\nimport { closeOutline, ellipsisHorizontalOutline, flashlightOutline } from 'ionicons/icons';\n\nexport default defineComponent({\n  name: 'HomePage',\n  components: {\n    IonPage,\n    IonIcon,\n    IonFab,\n    IonFabList,\n    IonFabButton,\n    QRCodeScanner,\n  },\n  setup() {\n    addIcons({\n      'ellipsis-horizontal-outline': ellipsisHorizontalOutline,\n      'flashlight-outline': flashlightOutline,\n      'close-outline': closeOutline,\n    });\n    const torchOn = ref(false);\n    const viewBox = ref(\"0 0 1280 720\");\n    const barcodeResults = ref([] as TextResult[]);\n    const sharedStates = states;\n    const runtimeSettings = ref('');\n    let frameWidth = 1280;\n    let frameHeight = 720;\n\n    if (sharedStates.QRCodeOnly) {\n      runtimeSettings.value = \"{\\\"ImageParameter\\\":{\\\"BarcodeFormatIds\\\":[\\\"BF_QR_CODE\\\"],\\\"Description\\\":\\\"\\\",\\\"Name\\\":\\\"Settings\\\"},\\\"Version\\\":\\\"3.0\\\"}\";\n    }else{\n      runtimeSettings.value = \"{\\\"ImageParameter\\\":{\\\"BarcodeFormatIds\\\":[\\\"BF_ALL\\\"],\\\"Description\\\":\\\"\\\",\\\"Name\\\":\\\"Settings\\\"},\\\"Version\\\":\\\"3.0\\\"}\";\n    }\n    \n    const router = useIonRouter();\n    let scanned = false;\n\n    const onScanned = (result:ScanResult) => {\n      console.log(\"onScanned\");\n      console.log(result);\n      if (result.results.length>0 && scanned === false && sharedStates.continuousScan === false) {\n        scanned = true;\n        sharedStates.barcodeResults = result.results;\n        router.back();\n      }else{\n        if (result.deviceOrientation === \"portrait\") {\n          viewBox.value = \"0 0 \" + frameHeight + \" \" + frameWidth;\n        }else{\n          viewBox.value = \"0 0 \" + frameWidth  + \" \" + frameHeight;\n        }\n        barcodeResults.value = result.results;\n      }\n    }\n\n    const onPlayed = (resolution:string) => {\n      const width = resolution.split(\"x\")[0];\n      const height = resolution.split(\"x\")[1];\n      frameWidth = parseInt(width);\n      frameHeight = parseInt(height);\n    }\n \n    const getPointsData = (tr:TextResult) => {\n      let pointsData = tr.x1 + \",\" + tr.y1 + \" \";\n      pointsData = pointsData + tr.x2+ \",\" + tr.y2 + \" \";\n      pointsData = pointsData + tr.x3+ \",\" + tr.y3 + \" \";\n      pointsData = pointsData + tr.x4+ \",\" + tr.y4;\n      return pointsData;\n    }\n\n    const toggleFlash = () => {\n      torchOn.value = !torchOn.value;\n      console.log(\"toggleFlash\");\n      console.log(torchOn.value);\n    }\n\n    const close = () => {\n      router.back();\n    }\n\n    onMounted(() => {\n      console.log(sharedStates.QRCodeOnly);\n      console.log(sharedStates.continuousScan);\n      console.log(sharedStates);\n      //setTimeout(goBack,2000);\n    });\n    return {\n      torchOn,\n      toggleFlash,\n      close,\n      sharedStates,\n      runtimeSettings,\n      viewBox,\n      barcodeResults,\n      getPointsData,\n      onScanned,\n      onPlayed\n    };\n  },\n});\n</script>\n\n<style scoped>\n.barcode-polygon {\n  fill:rgba(85,240,40,0.5);\n  stroke:green;\n  stroke-width:1;\n}\n.overlay {\n   top: 0;\n   left: 0;\n   position: absolute;\n   width: 100%;\n   height: 100%;\n   z-index: 998;\n }\n\n</style>\n","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/views/HomePage.vue",[],[],"/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/components/QRCodeScanner.vue",["46","47","48","49","50","51","52","53","54"],[],"<template>\r\n  <div v-if=\"!initialized\">Initializing...</div>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport { onBeforeUnmount, onMounted, ref, watch } from 'vue';\r\nimport { DBR, Options, ScanResult } from \"capacitor-plugin-dynamsoft-barcode-reader\";\r\nimport { PluginListenerHandle } from \"@capacitor/core\";\r\n\r\nconst props = defineProps(['license','dceLicense','torchOn','runtimeSettings']);\r\nconst emit = defineEmits(['onScanned','onPlayed']);\r\nconst initialized = ref(false);\r\nlet currentHeight = 0;\r\nlet currentWidth = 0;\r\nlet frameReadListener:PluginListenerHandle|undefined;\r\nlet onPlayedListener:PluginListenerHandle|undefined;\r\n\r\nconst handleRotation = (result:any, orientation: string, rotation:number) => {\r\n   let width,height;\r\n   if (orientation == \"portrait\") {\r\n     width = currentHeight;\r\n     height = currentWidth;\r\n   }else{\r\n     width = currentWidth;\r\n     height = currentHeight;\r\n   }\r\n   for (let i = 1; i < 5; i++) {\r\n     let x = result[\"x\"+i];\r\n     let y = result[\"y\"+i];\r\n     let rotatedX;\r\n     let rotatedY;\r\n            \r\n     switch (rotation) {\r\n       case 0:\r\n         rotatedX = x;\r\n         rotatedY = y;\r\n         break;\r\n       case 90:\r\n         rotatedX = width - y;\r\n         rotatedY = x;\r\n         break;\r\n       case 180:\r\n         rotatedX = width - x;\r\n         rotatedY = height - y;\r\n         break;\r\n       case 270:\r\n         rotatedX = height - y;\r\n         rotatedY = width - x;\r\n         break;\r\n       default:\r\n         rotatedX = x;\r\n         rotatedY = y;\r\n     }\r\n     result[\"x\"+i] = rotatedX;\r\n     result[\"y\"+i] = rotatedY;\r\n   }\r\n }\r\n\r\n\r\nonMounted(async () => {\r\n  console.log(props);\r\n  let options:Options = {};\r\n  if (props.license) {\r\n    options.license = props.license;\r\n  }\r\n  if (props.dceLicense) {\r\n    options.dceLicense = props.dceLicense;\r\n  }\r\n  let result = await DBR.initialize(options); // To use your license: DBR.initialize({license: <your license>})\r\n  console.log(\"QRCodeScanner mounted\");\r\n  if (result.success === true) {\r\n    initialized.value = true;\r\n    if (frameReadListener) {\r\n      frameReadListener.remove();\r\n    }\r\n    if (onPlayedListener) {\r\n      onPlayedListener.remove();\r\n    }\r\n    frameReadListener = await DBR.addListener('onFrameRead', (scanResult:ScanResult) => {\r\n      for (let index = 0; index < scanResult.results.length; index++) {\r\n        const result = scanResult.results[index];\r\n        if (scanResult.deviceOrientation && scanResult.frameOrientation) {\r\n          handleRotation(result,scanResult.deviceOrientation,scanResult.frameOrientation);\r\n        }\r\n      }\r\n      emit(\"onScanned\",scanResult);\r\n    });\r\n\r\n    onPlayedListener = await DBR.addListener(\"onPlayed\", (result:{resolution:string}) => {\r\n      currentWidth = parseInt(result.resolution.split(\"x\")[0]);\r\n      currentHeight = parseInt(result.resolution.split(\"x\")[1]);\r\n      emit(\"onPlayed\",result.resolution);\r\n    });\r\n\r\n    if (props.runtimeSettings) {\r\n      console.log(\"update runtime settings\");\r\n      console.log(props.runtimeSettings);\r\n      await DBR.initRuntimeSettingsWithString({template:props.runtimeSettings});\r\n    }\r\n\r\n    let camerasResult = await DBR.getAllCameras();\r\n    if (camerasResult.cameras) {\r\n      for (let index = 0; index < camerasResult.cameras.length; index++) {\r\n        const cameraID = camerasResult.cameras[index];\r\n        if (cameraID.toLowerCase().indexOf(\"founder\") != -1 ){\r\n          console.log(cameraID)\r\n          console.log(\"selct founder camera\"); //the USB camera's name of the developer\r\n          let selectionResult = await DBR.selectCamera({cameraID:cameraID});\r\n          console.log(selectionResult);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    await DBR.startScan();\r\n   \r\n  }\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  if (frameReadListener) {\r\n    frameReadListener.remove();\r\n  }\r\n  if (onPlayedListener) {\r\n    onPlayedListener.remove();\r\n  }\r\n  DBR.stopScan();\r\n  console.log(\"QRCodeScanner unmount\");\r\n});\r\n\r\n\r\n\r\nwatch(() => props.torchOn, (newVal, oldVal) => {\r\n  if (newVal === true) {\r\n    DBR.toggleTorch({on:true});\r\n  }else{\r\n    DBR.toggleTorch({on:false});\r\n  }\r\n});\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","/home/frey/SDSLabs/Ionic-Vue-QR-Code-Scanner/src/states.ts",[],[],{"ruleId":"55","severity":1,"message":"56","line":88,"column":7,"nodeType":"57","messageId":"58","endLine":88,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":89,"column":7,"nodeType":"57","messageId":"58","endLine":89,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":121,"column":7,"nodeType":"57","messageId":"58","endLine":121,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":122,"column":7,"nodeType":"57","messageId":"58","endLine":122,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":130,"column":7,"nodeType":"57","messageId":"58","endLine":130,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":131,"column":7,"nodeType":"57","messageId":"58","endLine":131,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":132,"column":7,"nodeType":"57","messageId":"58","endLine":132,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":61,"column":3,"nodeType":"57","messageId":"58","endLine":61,"endColumn":14},{"ruleId":"55","severity":1,"message":"56","line":70,"column":3,"nodeType":"57","messageId":"58","endLine":70,"endColumn":14},{"ruleId":"55","severity":1,"message":"56","line":96,"column":7,"nodeType":"57","messageId":"58","endLine":96,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":97,"column":7,"nodeType":"57","messageId":"58","endLine":97,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":106,"column":11,"nodeType":"57","messageId":"58","endLine":106,"endColumn":22},{"ruleId":"55","severity":1,"message":"56","line":107,"column":11,"nodeType":"57","messageId":"58","endLine":107,"endColumn":22},{"ruleId":"55","severity":1,"message":"56","line":109,"column":11,"nodeType":"57","messageId":"58","endLine":109,"endColumn":22},{"ruleId":"55","severity":1,"message":"56","line":128,"column":3,"nodeType":"57","messageId":"58","endLine":128,"endColumn":14},{"ruleId":"59","severity":1,"message":"60","line":133,"column":37,"nodeType":"61","messageId":"62","endLine":133,"endColumn":43},"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-unused-vars","'oldVal' is defined but never used.","Identifier","unusedVar"]